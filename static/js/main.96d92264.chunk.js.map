{"version":3,"sources":["logo.svg","components/CalculatorDisplay.js","components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CalculatorDisplay","props","value","displayValue","scaleDown","scientificNotation","formattedText","pointAt","indexOf","decimalValue","substring","evaluate","length","precessionWithFraction","parseFloat","toLocaleString","undefined","minimumFractionDigits","maxPrecision","toExponential","e","className","style","transform","digits","operators","Calculator","state","waitingForOperand","operator","clearAll","firstOperand","activeOperator","handleClick","processData","target","id","key","isDigit","includes","isOperator","processDigit","processOperator","processFunctionKey","setState","newDisplayValue","stringToEvaluate","console","log","newKeyValue","processClear","needPoint","processPoint","processUnknownKey","this","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.96d92264.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport { evaluate } from \"mathjs\"; // eval is a reserved word!\r\nconst maxCharAtFullSize = 6;\r\n\r\nconst CalculatorDisplay = (props) => {\r\n  const value = props.displayValue;\r\n  const scaleFactor = \"scale(0.36)\";\r\n  let scaleDown = null;\r\n  let scientificNotation = null;\r\n  let formattedText = null;\r\n  const maxPrecision = 16;\r\n\r\n  try {\r\n    const pointAt = `${value}`.indexOf(\".\");\r\n    const decimalValue = value.substring(pointAt, evaluate(value.length));\r\n  \r\n    var precessionWithFraction =\r\n      pointAt === -1 ? 0 : evaluate(decimalValue.length - 1);\r\n    formattedText = parseFloat(value).toLocaleString(undefined, {\r\n      minimumFractionDigits: precessionWithFraction,\r\n    });\r\n\r\n    if (formattedText === \"NaN\") {\r\n      //account for errors\r\n      formattedText = \"Error\";\r\n    } else {\r\n      if (formattedText.length > maxPrecision - 1) {\r\n        scientificNotation = parseFloat(value).toExponential(maxPrecision - 4); // Allow at least 4 characters (for scientific notation e.g. e+14) in the output string\r\n        if (\r\n          scientificNotation.substring(\r\n            scientificNotation.length - 3,\r\n            scientificNotation.length\r\n          ) === \"e+0\"\r\n        ) {\r\n          // if exponent part is not needed\r\n          scientificNotation = parseFloat(value).toExponential(\r\n            maxPrecision - 1\r\n          );\r\n          scientificNotation = scientificNotation.substring(\r\n            0,\r\n            scientificNotation.length - 3\r\n          );\r\n        }\r\n        formattedText = scientificNotation;\r\n        if (formattedText === \"NaN\") {\r\n          //account for overflow\r\n          formattedText = \"Overflow\\xA0Error\";\r\n        }\r\n      }\r\n      scaleDown =\r\n        formattedText.length > maxCharAtFullSize ? scaleFactor : \"scale(1)\";\r\n    }\r\n  } catch (e) {\r\n    formattedText = \"Error\";\r\n  }\r\n  return (\r\n    <div className=\"calc_display\">\r\n      <div className=\"text\" style={{ transform: scaleDown }}>\r\n        {formattedText}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CalculatorDisplay;\r\n","import React, { Component } from \"react\";\r\nimport CalculatorDisplay from \"./CalculatorDisplay\";\r\nimport { evaluate } from \"mathjs\";\r\nconst digits = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\r\nconst operators = [\"/\", \"*\", \"-\", \"+\", \"=\"];\r\n\r\nclass Calculator extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      displayValue: \"0\",\r\n      waitingForOperand: false,\r\n      operator: null,\r\n      clearAll: false,\r\n      firstOperand: \"0\",\r\n      activeOperator: null,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const handleClick = (e) => {\r\n      processData(`${e.target.value}`, e.target.id);\r\n    };\r\n     \r\n    const processData = (value, key) => {\r\n      const isDigit = digits.includes(value);\r\n      const isOperator = operators.includes(value);\r\n\r\n      if (isDigit) {\r\n        processDigit(value);\r\n      } else if (isOperator) {\r\n        processOperator(value, key);\r\n      } else {\r\n        processFunctionKey(value);\r\n      }\r\n    };\r\n\r\n    const processDigit = (value) => {\r\n      const { waitingForOperand, displayValue } = this.state;\r\n      if (waitingForOperand) {\r\n        this.setState({\r\n          displayValue: `${value}`,\r\n          waitingForOperand: false,\r\n          clearAll: false,\r\n        });\r\n      } else {\r\n        const newDisplayValue =\r\n          displayValue === \"0\" ? `${value}` : `${displayValue}${value}`;\r\n        this.setState({\r\n          displayValue: `${newDisplayValue}`,\r\n          waitingForOperand: false,\r\n          clearAll: false,\r\n        });\r\n      }\r\n    };\r\n    const processOperator = (value, key) => {\r\n      const {\r\n        displayValue,\r\n        operator,\r\n        waitingForOperand,\r\n        firstOperand,\r\n      } = this.state;\r\n      let newDisplayValue = null;\r\n      let newOperand = null;\r\n      let stringToEvaluate = null;\r\n      if (firstOperand === \"0\" || operator == null || waitingForOperand) {\r\n        this.setState({\r\n          waitingForOperand: true,\r\n          operator: value,\r\n          firstOperand: displayValue,\r\n          clearAll: false,\r\n          activeOperator: key,\r\n        });\r\n      } else {\r\n        stringToEvaluate = `${firstOperand}${operator}${displayValue}`;\r\n        try {\r\n          console.log(\"stringToEvaluate\", stringToEvaluate);\r\n          newDisplayValue = `${evaluate(stringToEvaluate)}`;\r\n        } catch (e) {\r\n          newDisplayValue = \"Error\";\r\n        }\r\n        if (newDisplayValue == \"Infinity\") {\r\n          newDisplayValue = \"Error\";\r\n        }\r\n        this.setState({\r\n          firstOperand: `${newDisplayValue}`,\r\n          waitingForOperand: true,\r\n          clearAll: false,\r\n          displayValue: `${newDisplayValue}`,\r\n          activeOperator: key,\r\n        });\r\n      }\r\n    };\r\n    const processClear = () => {\r\n      const { clearAll } = this.state;\r\n\r\n      this.setState({\r\n        displayValue: \"0\",\r\n        firstOperand: \"0\",\r\n        operator: null,\r\n        waitingForOperand: false,\r\n        clearAll: true,\r\n        activeOperator:null\r\n      });\r\n    };\r\n\r\n    const processPlusMinusToggle = () => {\r\n      this.setState({ displayValue: parseFloat(this.state.displayValue) * -1 });\r\n    };\r\n\r\n    const processPercentage = () => {\r\n      this.setState({\r\n        displayValue: parseFloat(this.state.displayValue) / 100,\r\n      });\r\n    };\r\n    const processPoint = (value) => {\r\n      const { displayValue, waitingForOperand } = this.state;\r\n      const needPoint = `${displayValue}`.indexOf(\".\") === -1 ? true : false;\r\n      if (waitingForOperand) {\r\n        this.setState({\r\n          displayValue: \"0.\",\r\n          waitingForOperand: false,\r\n          clearAll: false,\r\n        });\r\n      } else {\r\n        if (needPoint) {\r\n          this.setState({\r\n            displayValue: `${displayValue}${value}`,\r\n            waitingForOperand: false,\r\n            clearAll: false,\r\n          });\r\n        }\r\n      }\r\n    };\r\n    const processFunctionKey = (newKeyValue) => {\r\n      switch (newKeyValue) {\r\n        case \"C\":\r\n          processClear(newKeyValue);\r\n          break;\r\n        case \"±\":\r\n          processPlusMinusToggle(newKeyValue);\r\n          break;\r\n        case \".\":\r\n          processPoint(newKeyValue);\r\n          break;\r\n        case \"%\":\r\n          processPercentage(newKeyValue);\r\n          break;\r\n        default:\r\n          this.processUnknownKey(newKeyValue);\r\n      }\r\n    };\r\n    const processFunction = (value) => {};\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <CalculatorDisplay {...this.state} />\r\n        <div className=\"keypads\">\r\n          <div className=\"input-keys\">\r\n            <div className=\"function_keypad\">\r\n              <button\r\n                id=\"key-clear\"\r\n                value=\"C\"\r\n                className=\"calculator-key key-clear\"\r\n                onClick={handleClick}\r\n              >\r\n                {this.state.clearAll ? \"AC\" : \"C\"}\r\n              </button>\r\n              <button\r\n                id=\"key-sign\"\r\n                value=\"±\"\r\n                className=\"calculator-key key-clear\"\r\n                onClick={handleClick}\r\n              >\r\n                &plusmn;\r\n              </button>\r\n              <button\r\n                id=\"key-percentage\"\r\n                value=\"%\"\r\n                className=\"calculator-key key-clear\"\r\n                onClick={handleClick}\r\n              >\r\n                %\r\n              </button>\r\n            </div>\r\n            <div className=\"digit_keypad\">\r\n              <button\r\n                id=\"key-0\"\r\n                value=\"0\"\r\n                className=\"calculator-key key-0\"\r\n                onClick={handleClick}\r\n              >\r\n                0\r\n              </button>\r\n              <button\r\n                id=\"key-dot\"\r\n                value=\".\"\r\n                className=\"calculator-key key-dot\"\r\n                onClick={handleClick}\r\n              >\r\n                &middot;\r\n              </button>\r\n              <button\r\n                id=\"key-1\"\r\n                value=\"1\"\r\n                className=\"calculator-key key-1\"\r\n                onClick={handleClick}\r\n              >\r\n                1\r\n              </button>\r\n              <button\r\n                id=\"key-2\"\r\n                value=\"2\"\r\n                className=\"calculator-key key-2\"\r\n                onClick={handleClick}\r\n              >\r\n                2\r\n              </button>\r\n              <button\r\n                id=\"key-3\"\r\n                value=\"3\"\r\n                className=\"calculator-key key-3\"\r\n                onClick={handleClick}\r\n              >\r\n                3\r\n              </button>\r\n              <button\r\n                id=\"key-4\"\r\n                value=\"4\"\r\n                className=\"calculator-key key-4\"\r\n                onClick={handleClick}\r\n              >\r\n                4\r\n              </button>\r\n              <button\r\n                id=\"key-5\"\r\n                value=\"5\"\r\n                className=\"calculator-key key-5\"\r\n                onClick={handleClick}\r\n              >\r\n                5\r\n              </button>\r\n              <button\r\n                id=\"key-6\"\r\n                value=\"6\"\r\n                className=\"calculator-key key-6\"\r\n                onClick={handleClick}\r\n              >\r\n                6\r\n              </button>\r\n              <button\r\n                id=\"key-7\"\r\n                value=\"7\"\r\n                className=\"calculator-key key-7\"\r\n                onClick={handleClick}\r\n              >\r\n                7\r\n              </button>\r\n              <button\r\n                id=\"key-8\"\r\n                value=\"8\"\r\n                className=\"calculator-key key-8\"\r\n                onClick={handleClick}\r\n              >\r\n                8\r\n              </button>\r\n              <button\r\n                id=\"key-9\"\r\n                value=\"9\"\r\n                className=\"calculator-key key-9\"\r\n                onClick={handleClick}\r\n              >\r\n                9\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div className=\"operation-keypad\">\r\n            <button\r\n              id=\"key-divide\"\r\n              value=\"/\"\r\n              className={\r\n                this.state.activeOperator == \"key-divide\"\r\n                  ? \"calculator-key key-divide active\"\r\n                  : \"calculator-key key-divide \"\r\n              }\r\n              onClick={handleClick}\r\n            >\r\n              &divide;\r\n            </button>\r\n            <button\r\n              id=\"key-multiply\"\r\n              value=\"*\"\r\n              className={\r\n                this.state.activeOperator == \"key-multiply\"\r\n                  ? \"calculator-key key-divide active\"\r\n                  : \"calculator-key key-divide\"\r\n              }\r\n              onClick={handleClick}\r\n            >\r\n              &times;\r\n            </button>\r\n            <button\r\n              id=\"key-subtract\"\r\n              value=\"-\"\r\n              className={\r\n                this.state.activeOperator == \"key-subtract\"\r\n                  ? \"calculator-key key-divide active\"\r\n                  : \"calculator-key key-divide\"\r\n              }\r\n              onClick={handleClick}\r\n            >\r\n              &ndash;\r\n            </button>\r\n            <button\r\n              id=\"key-add\"\r\n              value=\"+\"\r\n              className={\r\n                this.state.activeOperator == \"key-add\"\r\n                  ? \"calculator-key key-divide active\"\r\n                  : \"calculator-key key-divide \"\r\n              }\r\n              onClick={handleClick}\r\n            >\r\n              +\r\n            </button>\r\n            <button\r\n              id=\"key-equals\"\r\n              value=\"=\"\r\n              className={\r\n                this.state.activeOperator == \"key-equals\"\r\n                  ? \"calculator-key key-divide active\"\r\n                  : \"calculator-key key-divide \"\r\n              }\r\n              onClick={handleClick}\r\n            >\r\n              =\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Calculator;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Calculator from './components/Calculator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div>\n        <h2>React Calculator</h2>\n        <div id=\"wrapper\">\n           <div id=\"calculator\">\n               <Calculator/>\n           </div>\n        </div>\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}